package com.vocabtester.db;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public class DbUtil {

	private static Connection conn = null;

	public static Connection connect() {
		if (conn == null) {
			try {
				// db parameters
				String location = System.getProperty("user.dir");
				String url = "jdbc:sqlite:" + location + "\\vocabdb.db";
				// create a connection to the database
				conn = DriverManager.getConnection(url);

				System.out.println("Connection to SQLite has been established.");

				createTableStructures(url);

				// If there is already java data, then don't insert the
				// following data (or their will be double, triple data etc
				// every run
				String checkIfJavaDataExists = "SELECT * from javawords";
				Statement s1 = conn.createStatement();
				ResultSet rs = s1.executeQuery(checkIfJavaDataExists);
				int id = 0;
				while (rs.next()) {
					id = rs.getInt("id");
				}
				if (id < 2) {

					// if data does not exist then:
					insertDataIntoTables(conn, "javawords", "Array",
							"A collection of data items, all of the same type, in which each item''s position is uniquely designated by an integer. ");
					insertDataIntoTables(conn, "javawords", "Applet",
							"A component that typically executes in a Web browser, but can execute in a variety of other applications or devices that support it.");
					insertDataIntoTables(conn, "javawords", "Bytecode",
							"Machine-independent code generated by the Java compiler and executed by the Java interpreter. ");
					insertDataIntoTables(conn, "javawords", "Bean",
							"A reusable software component that conforms to certain design and naming conventions. ");
					insertDataIntoTables(conn, "javawords", "Compilation unit",
							"The smallest unit of source code that can be compiled.");
					insertDataIntoTables(conn, "javawords", "Constructor",
							"A pseudo-method that creates an object. In the Java programming language, they are instance methods with the same name as their class. They are invoked using the new keyword.");
					insertDataIntoTables(conn, "javawords", "Default",
							"A Java keyword optionally used after all case conditions in a switch statement. If all case conditions are not matched by the value of the switch variable, this keyword will be executed. ");
					insertDataIntoTables(conn, "javawords", "Overloading",
							"Using one identifier to refer to multiple items in the same scope.");
					insertDataIntoTables(conn, "javawords", "Overriding",
							"Providing a different implementation of a method in a subclass of the class that originally defined the method.");
					insertDataIntoTables(conn, "javawords", "Process",
							"A virtual address space containing one or more threads.");
					insertDataIntoTables(conn, "javawords", "SSL",
							"A protocol that allows communication between a Web browser and a server to be encrypted for privacy. ");
					insertDataIntoTables(conn, "javawords", "SQL",
							"The standardized relational database language for defining database objects and manipulating data. ");
					insertDataIntoTables(conn, "javawords", "SOAP",
							"Uses a combination of XML-based data structuring and the Hyper Text Transfer Protocol (HTTP) to define a standardized method for invoking methods in objects distributed in diverse operating environments across the Internet. ");
					insertDataIntoTables(conn, "javawords", "Wrapper",
							"An object that encapsulates and delegates to another object to alter its interface or behavior in some way.");

				}

				String checkIfPuppetDataExists = "SELECT * from puppetwords";
				Statement s2 = conn.createStatement();
				ResultSet rs2 = s2.executeQuery(checkIfPuppetDataExists);
				int id2 = 0;
				while (rs2.next()) {
					id2 = rs2.getInt("id");
				}
				if (id2 < 2) {
					insertDataIntoTables(conn, "puppetwords", "Attribute",
							"Specifies the desired state of a given configuration resource");
					insertDataIntoTables(conn, "puppetwords", "Catalog",
							"Describes the desired state of each managed resource on a node. It is a compilation of all the resources that the Puppet agent applies to a given node, as well as the relationships between those resources.");
					insertDataIntoTables(conn, "puppetwords", "Class",
							"A collection of related resources that, once defined, can be declared as a single unit. ");
					insertDataIntoTables(conn, "puppetwords", "Classify",
							"To assign classes to a node, as well as provide any data required by the classes.");
					insertDataIntoTables(conn, "puppetwords", "External Node Classifier",
							"An executable script that returns information about which classes to apply to a node when called by a Puppet master.");
					insertDataIntoTables(conn, "puppetwords", "Fact",
							"A piece of information about a node, such as its hostname, IP address, and operating system");
					insertDataIntoTables(conn, "puppetwords", "Facter",
							"Reads facts about a node, such as its hostname, IP address, and operating system, and makes them available to Puppet");
					insertDataIntoTables(conn, "puppetwords", "Filebucket",
							"A repository in which Puppet stores file backups when it has to replace files");
					insertDataIntoTables(conn, "puppetwords", "Function",
							"A Puppet language statement that returns a value or modifies a catalog");
					insertDataIntoTables(conn, "puppetwords", "Puppet master",
							"Compiles and serves configuration catalogs on demand to Puppet agents on client nodes.");
					insertDataIntoTables(conn, "puppetwords", "Masterless",
							"A Puppet node that does not rely on a master for its catalog. ");
					insertDataIntoTables(conn, "puppetwords", "Module",
							"A collection of classes, resource types, files, functions and templates, organized around a particular purpose.");

				}
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
			return conn;
		}
		return conn;
	}

	private static void createTableStructures(String url) {
		String sqlForJavawords = "CREATE TABLE IF NOT EXISTS javawords(\n" + "id INTEGER PRIMARY KEY AUTOINCREMENT,\n"
				+ "word TEXT NOT NULL,\n" + "description TEXT NOT NULL\n" + ");";

		String sqlForPuppetwords = "CREATE TABLE IF NOT EXISTS puppetwords(\n"
				+ "id INTEGER PRIMARY KEY AUTOINCREMENT,\n" + "word TEXT NOT NULL,\n" + "description TEXT NOT NULL\n"
				+ ");";

		try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement()) {
			// create a new table
			stmt.execute(sqlForJavawords);
			stmt.execute(sqlForPuppetwords);

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
	}

	private static void insertDataIntoTables(Connection conn, String tableName, String word, String description) {

		String sql = "INSERT INTO " + tableName + "(word,description) VALUES(?,?)";

		try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setString(1, word);
			pstmt.setString(2, description);
			pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

}
